import ply.lex as lex
import ply.yacc as yacc, datetime
from logic.lexico import tokens, lexer

#lacedeno11 aporte inicio
precedence = (
    ('left', 'OR'),
    ('left', 'AND'),
    ('nonassoc', 'IGUAL', 'DIFERENTE'),
    ('nonassoc', 'MENOR', 'MAYOR', 'MENORIGUAL', 'MAYORIGUAL'),
    ('left', 'MAS', 'MENOS'),
    ('left', 'POR', 'DIVIDIR', 'MODULO'),
    ('right', 'NOT'),
    ('right', 'UMINUS'),
)
#lacedeno11 aporte fin

symbol_table = {}

#lacedeno11 aporte inicio
start = 'programa'

semantic_context = {
    'dentro_de_bucle': 0,
    'funcion_actual': None,
    'clase_actual': None 
}

errores_semanticos = []

def registrar_error_semantico(mensaje, linea):
    error = f"[Error Semántico] Línea {linea}: {mensaje}"
    errores_semanticos.append(error)

def get_expression_type(node):
    if isinstance(node, int): return 'int'
    if isinstance(node, float): return 'float'
    if isinstance(node, str):
        if node == 'true' or node == 'false': return 'bool'
        if node.startswith('"') and node.endswith('"'): return 'string'
        if node in symbol_table:
            if symbol_table[node].get('type') != 'function':
                return symbol_table[node].get('type')
            else:
                return 'desconocido'
        else:
            registrar_error_semantico(f"La variable '{node}' no ha sido declarada.", 0)
            return 'desconocido'
    if isinstance(node, tuple):
        op = node[0]
        if op in ('+', '-', '*', '/', '%'):
            return get_expression_type(node[1])
        if op in ('<', '>', '<=', '>=', '==', '!=', '&&', '||', '!'):
            return 'bool'
        if op == 'nueva_lista':
            tipo_interno = node[1].split('<')[1].rstrip('>')
            return f"List<{tipo_interno}>"
        if op == 'nuevo_array':
            tipo_array = node[1].split()[1]
            return f"{tipo_array}[]"
        return 'desconocido'

#ArielV17 inicio
# -- Asignaciones complejas, tipos y expresiones --
def p_asignacion_compleja(p):
    '''
    asignacion : tipo_lista IDENTIFICADOR ASIGNAR expresion_lista SENTENCIAFIN
               | tipo_array IDENTIFICADOR ASIGNAR expresion_array SENTENCIAFIN
    '''
    tipo = p[1]
    nombre = p[2]
    valor = p[4]

    if nombre in symbol_table:
        registrar_error_semantico(f"La variable '{nombre}' ya fue declarada.", p.lineno(2))
    else:
        if isinstance(valor, tuple) and valor[0] == 'nueva_lista':
            tipo_valor = f"List<{valor[1].split('<')[1].rstrip('>')}>"
        elif isinstance(valor, tuple) and valor[0] == 'nuevo_array':
            tipo_valor = valor[1].split()[1] + '[]'
        else:
            tipo_valor = get_expression_type(valor)

        if tipo != tipo_valor and tipo_valor != 'desconocido':
            registrar_error_semantico(
                f"Tipo incompatible: se esperaba '{tipo}' pero se asignó '{tipo_valor}'.",
                p.lineno(3)
            )

        symbol_table[nombre] = {'type': tipo}

    p[0] = ('asignacion_compleja', tipo, nombre, valor)

def p_tipo_lista(p):
    '''
    tipo_lista : LISTA MENOR tipo_retorno MAYOR 
    '''
    tipo = p[3]

def p_tipo_array(p):
    '''
    tipo_array : ARRAY_DECLARATION
    '''
    p[0] = p[1]

def p_expresion_lista(p):
    '''
    expresion_lista : NEW LISTA MENOR tipo_retorno MAYOR IPAREN DPAREN
                    | NEW LISTA MENOR tipo_retorno MAYOR ILLAVE elementos DLLAVE
    '''
    if len(p) == 8: 
        tipo = p[4]
        p[0] = ('nueva_lista', f"List<{tipo}>", [])
    else:
        tipo_decl = p[4]
        tipo_real, valores = p[7]

        if tipo_decl != tipo_real and tipo_real != 'desconocido':
            registrar_error_semantico(f"Tipo declarado 'List<{tipo_decl}>' no coincide con el tipo de elementos '{tipo_real}'", p.lineno(1))

        p[0] = ('nueva_lista', f"List<{tipo_decl}>", valores)

def p_primitivo(p):
    '''
    primitivo : FLOAT_LITERAL
             | INT_LITERAL
             | CHAR_LITERAL
             | STRING_LITERAL
             | BOOL_LITERAL
    '''
    token_type = p.slice[1].type
    value = p[1]

    if token_type == 'FLOAT_LITERAL':
        p[0] = ('float', float(value.rstrip('fF')))
    elif token_type == 'INT_LITERAL':
        p[0] = ('int', int(value))
    elif token_type == 'CHAR_LITERAL':
        p[0] = ('char', value)
    elif token_type == 'STRING_LITERAL':
        p[0] = ('string', value)
    elif token_type == 'BOOL_LITERAL':
        p[0] = ('bool', value.lower() == 'true')

def p_elementos(p):
    '''
    elementos : primitivo COMA elementos 
                | primitivo 
    '''
    if len(p) == 2:
        tipo, valor = p[1]
        p[0] = (tipo, [valor])
    else:
        tipo1, valor1 = p[1]
        tipo2, valores_restantes = p[3]

        if tipo1 != tipo2:
            tipo_final=tipo2
        else:
            tipo_final = tipo1

        p[0] = (tipo_final, [valor1] + valores_restantes)

def p_expresion_array(p):
    '''
    expresion_array : ARRAY_CREATION
    '''
    p[0] = ('nuevo_array', p[1])
#ArielV17 fin

# --- Lugar para funciones de análisis semántico ---
# (Coloca funciones como tipo_expresion y verificar_asignacion justo antes de yacc)

# (El resto del parser y main se conservan igual, pero organizados en orden lógico según contribuciones y dependencias)

# --- Parser instantiation and execution functions ---
parser = yacc.yacc()

def main():
    # ... [código main intacto]
    pass

def analizar_codigo(codigo_fuente):
    # ... [código analizar_codigo intacto]
    pass

if __name__ == "__main__":
    main()
