
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftORleftANDnonassocIGUALDIFERENTEnonassocMENORMAYORMENORIGUALMAYORIGUALleftMASMENOSleftPORDIVIDIRMODULOrightNOTrightUMINUSABSTRACT ADD AND ARRAY_CREATION ARRAY_TYPE ARROBA AS ASIGNAR BASE BOOL BOOL_LITERAL BREAK BYTE CASE CATCH CHAR CHAR_LITERAL CHECKED CLASS COMA CONSOLE CONST CONTINUE DCORCH DECIMAL DECREMENTO DEFAULT DELEGATE DICTIONARY DIFERENTE DIVIDIR DIVIDIRIGUAL DLLAVE DO DOUBLE DPAREN DYNAMIC ELSE ENUM EVENT EXTERN FALSE FINALLY FIXED FLECHALAMBDA FLOAT FLOAT_LITERAL FOR FOREACH FORMAT GENERICO_INVALIDO GET GOTO ICORCH IDENTIFICADOR ID_INVALIDO IF IGUAL ILLAVE IMPORT IN INCREMENTO INT INTERFACE INTERNAL INT_LITERAL IPAREN IS LISTA LOCK LONG MAS MASIGUAL MAYOR MAYORIGUAL MENOR MENORIGUAL MENOS MENOSIGUAL MODULO NAMESPACE NEW NEWLINE NOT NULL OBJECT OPERATOR OR OUT OVERRIDE PARAMS PARTIAL POR PORIGUAL PRIVATE PROTECTED PUBLIC PUNTO READONLY REF REMOVE RETURN SBYTE SEALED SENTENCIAFIN SET SHORT SIZEOF STACKALLOC STATIC STRING STRING_LITERAL STRUCT SWITCH THIS THROW TRUE TRY TYPEOF UINT ULONG UNCHECKED UNSAFE USHORT USING VAR VIRTUAL VOID VOLATILE WHILE WRITELINE YIELD\n    programa : lista_sentencias\n    \n    lista_sentencias : lista_sentencias sentencia\n                     | empty\n    \n    sentencia : declaracion SENTENCIAFIN\n              | asignacion_elemento SENTENCIAFIN\n              | if_statement\n              | while_loop\n              | for_loop\n              | impresion SENTENCIAFIN\n              | instruccion_return SENTENCIAFIN\n              | instruccion_break SENTENCIAFIN\n    \n    declaracion : tipo_dato IDENTIFICADOR ASIGNAR expresion\n                | tipo_array IDENTIFICADOR ASIGNAR expresion_array\n                | IDENTIFICADOR ASIGNAR expresion\n    \n    asignacion_elemento : IDENTIFICADOR ICORCH expresion DCORCH ASIGNAR expresion\n    \n    tipo_dato : tipo_retorno\n              | tipo_lista\n              | tipo_diccionario\n    \n    tipo_retorno : INT\n                 | FLOAT\n                 | STRING\n                 | BOOL\n                 | VOID\n                 | CHAR\n    tipo_lista : LISTA MENOR tipo_retorno MAYORtipo_diccionario : DICTIONARY MENOR tipo_retorno COMA tipo_retorno MAYORtipo_array : ARRAY_TYPE\n    expresion : expresion_aritmetica\n              | expresion_logica\n              | valor_literal\n              | IDENTIFICADOR\n              | expresion_lista\n              | expresion_diccionario\n              | expresion_array\n    \n    expresion_aritmetica : expresion MAS expresion\n                         | expresion MENOS expresion\n                         | expresion POR expresion\n                         | expresion DIVIDIR expresion\n                         | MENOS expresion %prec UMINUS\n    \n    expresion_logica : expresion MAYOR expresion\n                     | expresion MENOR expresion\n                     | expresion MAYORIGUAL expresion\n                     | expresion MENORIGUAL expresion\n                     | expresion IGUAL expresion\n                     | expresion DIFERENTE expresion\n                     | expresion AND expresion\n                     | expresion OR expresion\n                     | NOT expresion\n    expresion : IPAREN expresion DPAREN\n    valor_literal : INT_LITERAL\n                  | FLOAT_LITERAL\n                  | STRING_LITERAL\n                  | CHAR_LITERAL\n                  | TRUE\n                  | FALSE\n    expresion_lista : NEW tipo_lista IPAREN DPARENexpresion_diccionario : NEW tipo_diccionario IPAREN DPAREN\n    expresion_array : ARRAY_CREATION\n                    | ILLAVE lista_elementos_array DLLAVE\n    \n    lista_elementos_array : expresion COMA lista_elementos_array\n                        | expresion\n    if_statement : IF IPAREN expresion DPAREN bloque_codigowhile_loop : WHILE IPAREN expresion DPAREN enter_loop_scope bloque_codigofor_loop : FOR IPAREN declaracion SENTENCIAFIN expresion SENTENCIAFIN expresion DPAREN enter_loop_scope bloque_codigoenter_loop_scope :bloque_codigo : ILLAVE lista_sentencias DLLAVEimpresion : CONSOLE PUNTO WRITELINE IPAREN expresion DPARENinstruccion_return : RETURN expresioninstruccion_break : BREAKempty :'
    
_lr_action_items = {'IDENTIFICADOR':([0,2,3,4,7,8,9,13,15,20,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,40,41,43,44,45,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,123,125,126,127,136,137,138,140,141,145,],[-70,14,-3,-2,-6,-7,-8,39,42,51,-16,-17,-18,-27,-19,-20,-21,-22,-23,-24,-4,-5,-9,-10,-11,51,51,51,51,76,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-25,51,-62,-70,14,-63,51,-26,-66,-64,]),'IF':([0,2,3,4,7,8,9,34,35,36,37,38,126,127,136,137,141,145,],[-70,16,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-62,-70,16,-63,-66,-64,]),'WHILE':([0,2,3,4,7,8,9,34,35,36,37,38,126,127,136,137,141,145,],[-70,17,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-62,-70,17,-63,-66,-64,]),'FOR':([0,2,3,4,7,8,9,34,35,36,37,38,126,127,136,137,141,145,],[-70,18,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-62,-70,18,-63,-66,-64,]),'CONSOLE':([0,2,3,4,7,8,9,34,35,36,37,38,126,127,136,137,141,145,],[-70,19,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-62,-70,19,-63,-66,-64,]),'RETURN':([0,2,3,4,7,8,9,34,35,36,37,38,126,127,136,137,141,145,],[-70,20,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-62,-70,20,-63,-66,-64,]),'BREAK':([0,2,3,4,7,8,9,34,35,36,37,38,126,127,136,137,141,145,],[-70,21,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-62,-70,21,-63,-66,-64,]),'ARRAY_TYPE':([0,2,3,4,7,8,9,34,35,36,37,38,45,126,127,136,137,141,145,],[-70,25,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,25,-62,-70,25,-63,-66,-64,]),'INT':([0,2,3,4,7,8,9,34,35,36,37,38,45,67,68,124,126,127,136,137,141,145,],[-70,26,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,26,26,26,26,-62,-70,26,-63,-66,-64,]),'FLOAT':([0,2,3,4,7,8,9,34,35,36,37,38,45,67,68,124,126,127,136,137,141,145,],[-70,27,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,27,27,27,27,-62,-70,27,-63,-66,-64,]),'STRING':([0,2,3,4,7,8,9,34,35,36,37,38,45,67,68,124,126,127,136,137,141,145,],[-70,28,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,28,28,28,28,-62,-70,28,-63,-66,-64,]),'BOOL':([0,2,3,4,7,8,9,34,35,36,37,38,45,67,68,124,126,127,136,137,141,145,],[-70,29,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,29,29,29,29,-62,-70,29,-63,-66,-64,]),'VOID':([0,2,3,4,7,8,9,34,35,36,37,38,45,67,68,124,126,127,136,137,141,145,],[-70,30,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,30,30,30,30,-62,-70,30,-63,-66,-64,]),'CHAR':([0,2,3,4,7,8,9,34,35,36,37,38,45,67,68,124,126,127,136,137,141,145,],[-70,31,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,31,31,31,31,-62,-70,31,-63,-66,-64,]),'LISTA':([0,2,3,4,7,8,9,34,35,36,37,38,45,64,126,127,136,137,141,145,],[-70,32,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,32,32,-62,-70,32,-63,-66,-64,]),'DICTIONARY':([0,2,3,4,7,8,9,34,35,36,37,38,45,64,126,127,136,137,141,145,],[-70,33,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,33,33,-62,-70,33,-63,-66,-64,]),'$end':([0,1,2,3,4,7,8,9,34,35,36,37,38,126,137,141,145,],[-70,0,-1,-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-62,-63,-66,-64,]),'DLLAVE':([3,4,7,8,9,34,35,36,37,38,48,49,50,51,52,53,54,58,59,60,61,62,63,65,91,92,95,96,106,107,108,109,110,111,112,113,114,115,116,117,118,121,126,127,131,132,133,136,137,141,145,],[-3,-2,-6,-7,-8,-4,-5,-9,-10,-11,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,-39,-48,121,-61,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-49,-59,-62,-70,-56,-57,-60,141,-63,-66,-64,]),'SENTENCIAFIN':([5,6,10,11,12,21,47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,75,91,92,99,101,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,131,132,135,139,],[34,35,36,37,38,-69,-68,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,-14,104,-39,-48,-12,-13,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-49,-59,138,-56,-57,-15,-67,]),'ASIGNAR':([14,39,42,76,100,],[40,69,72,40,125,]),'ICORCH':([14,],[41,]),'IPAREN':([16,17,18,20,40,41,43,44,55,56,57,66,69,77,78,79,80,81,82,83,84,85,86,87,88,89,93,94,104,105,122,123,125,138,140,],[43,44,45,55,55,55,55,55,55,55,55,55,55,105,55,55,55,55,55,55,55,55,55,55,55,55,119,120,55,55,55,-25,55,55,-26,]),'PUNTO':([19,],[46,]),'MENOS':([20,40,41,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,69,70,71,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,96,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,125,129,130,131,132,135,138,142,],[56,56,56,56,56,79,-28,-29,-30,-31,-32,-33,-34,56,56,56,-50,-51,-52,-53,-54,-55,-58,56,56,79,79,79,79,56,56,56,56,56,56,56,56,56,56,56,56,79,-39,-48,79,79,56,56,-35,-36,-37,-38,79,79,79,79,79,79,79,79,-49,-59,56,56,79,79,-56,-57,79,56,79,]),'NOT':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'INT_LITERAL':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'FLOAT_LITERAL':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'STRING_LITERAL':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CHAR_LITERAL':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TRUE':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'FALSE':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'NEW':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ARRAY_CREATION':([20,40,41,43,44,55,56,57,66,69,72,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'ILLAVE':([20,40,41,43,44,55,56,57,66,69,72,78,79,80,81,82,83,84,85,86,87,88,89,102,103,104,105,122,125,128,138,143,144,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,127,-65,66,66,66,66,127,66,-65,127,]),'MAYOR':([26,27,28,29,30,31,47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,97,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,134,135,142,],[-19,-20,-21,-22,-23,-24,82,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,82,82,82,82,82,-39,-48,82,123,82,-35,-36,-37,-38,None,None,None,None,82,82,82,82,-49,-59,82,82,-56,-57,140,82,82,]),'COMA':([26,27,28,29,30,31,48,49,50,51,52,53,54,58,59,60,61,62,63,65,91,92,96,98,106,107,108,109,110,111,112,113,114,115,116,117,118,121,131,132,],[-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,-39,-48,122,124,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-49,-59,-56,-57,]),'MENOR':([32,33,47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[67,68,83,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,83,83,83,83,83,-39,-48,83,83,-35,-36,-37,-38,None,None,None,None,83,83,83,83,-49,-59,83,83,-56,-57,83,83,]),'WRITELINE':([46,],[77,]),'MAS':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[78,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,78,78,78,78,78,-39,-48,78,78,-35,-36,-37,-38,78,78,78,78,78,78,78,78,-49,-59,78,78,-56,-57,78,78,]),'POR':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[80,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,80,80,80,80,80,-39,-48,80,80,80,80,-37,-38,80,80,80,80,80,80,80,80,-49,-59,80,80,-56,-57,80,80,]),'DIVIDIR':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[81,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,81,81,81,81,81,-39,-48,81,81,81,81,-37,-38,81,81,81,81,81,81,81,81,-49,-59,81,81,-56,-57,81,81,]),'MAYORIGUAL':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[84,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,84,84,84,84,84,-39,-48,84,84,-35,-36,-37,-38,None,None,None,None,84,84,84,84,-49,-59,84,84,-56,-57,84,84,]),'MENORIGUAL':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[85,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,85,85,85,85,85,-39,-48,85,85,-35,-36,-37,-38,None,None,None,None,85,85,85,85,-49,-59,85,85,-56,-57,85,85,]),'IGUAL':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[86,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,86,86,86,86,86,-39,-48,86,86,-35,-36,-37,-38,-40,-41,-42,-43,None,None,86,86,-49,-59,86,86,-56,-57,86,86,]),'DIFERENTE':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[87,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,87,87,87,87,87,-39,-48,87,87,-35,-36,-37,-38,-40,-41,-42,-43,None,None,87,87,-49,-59,87,87,-56,-57,87,87,]),'AND':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[88,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,88,88,88,88,88,-39,-48,88,88,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,88,-49,-59,88,88,-56,-57,88,88,]),'OR':([47,48,49,50,51,52,53,54,58,59,60,61,62,63,65,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,118,121,129,130,131,132,135,142,],[89,-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,89,89,89,89,89,-39,-48,89,89,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-49,-59,89,89,-56,-57,89,89,]),'DCORCH':([48,49,50,51,52,53,54,58,59,60,61,62,63,65,71,91,92,106,107,108,109,110,111,112,113,114,115,116,117,118,121,131,132,],[-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,100,-39,-48,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-49,-59,-56,-57,]),'DPAREN':([48,49,50,51,52,53,54,58,59,60,61,62,63,65,73,74,90,91,92,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,130,131,132,142,],[-28,-29,-30,-31,-32,-33,-34,-50,-51,-52,-53,-54,-55,-58,102,103,118,-39,-48,-35,-36,-37,-38,-40,-41,-42,-43,-44,-45,-46,-47,-49,131,132,-59,139,-56,-57,143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'lista_sentencias':([0,127,],[2,136,]),'empty':([0,127,],[3,3,]),'sentencia':([2,136,],[4,4,]),'declaracion':([2,45,136,],[5,75,5,]),'asignacion_elemento':([2,136,],[6,6,]),'if_statement':([2,136,],[7,7,]),'while_loop':([2,136,],[8,8,]),'for_loop':([2,136,],[9,9,]),'impresion':([2,136,],[10,10,]),'instruccion_return':([2,136,],[11,11,]),'instruccion_break':([2,136,],[12,12,]),'tipo_dato':([2,45,136,],[13,13,13,]),'tipo_array':([2,45,136,],[15,15,15,]),'tipo_retorno':([2,45,67,68,124,136,],[22,22,97,98,134,22,]),'tipo_lista':([2,45,64,136,],[23,23,93,23,]),'tipo_diccionario':([2,45,64,136,],[24,24,94,24,]),'expresion':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[47,70,71,73,74,90,91,92,96,99,106,107,108,109,110,111,112,113,114,115,116,117,129,130,96,135,142,]),'expresion_aritmetica':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'expresion_logica':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'valor_literal':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'expresion_lista':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'expresion_diccionario':([20,40,41,43,44,55,56,57,66,69,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'expresion_array':([20,40,41,43,44,55,56,57,66,69,72,78,79,80,81,82,83,84,85,86,87,88,89,104,105,122,125,138,],[54,54,54,54,54,54,54,54,54,54,101,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'lista_elementos_array':([66,122,],[95,133,]),'bloque_codigo':([102,128,144,],[126,137,145,]),'enter_loop_scope':([103,143,],[128,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> lista_sentencias','programa',1,'p_programa','sintactico.py',85),
  ('lista_sentencias -> lista_sentencias sentencia','lista_sentencias',2,'p_lista_sentencias','sintactico.py',91),
  ('lista_sentencias -> empty','lista_sentencias',1,'p_lista_sentencias','sintactico.py',92),
  ('sentencia -> declaracion SENTENCIAFIN','sentencia',2,'p_sentencia','sintactico.py',104),
  ('sentencia -> asignacion_elemento SENTENCIAFIN','sentencia',2,'p_sentencia','sintactico.py',105),
  ('sentencia -> if_statement','sentencia',1,'p_sentencia','sintactico.py',106),
  ('sentencia -> while_loop','sentencia',1,'p_sentencia','sintactico.py',107),
  ('sentencia -> for_loop','sentencia',1,'p_sentencia','sintactico.py',108),
  ('sentencia -> impresion SENTENCIAFIN','sentencia',2,'p_sentencia','sintactico.py',109),
  ('sentencia -> instruccion_return SENTENCIAFIN','sentencia',2,'p_sentencia','sintactico.py',110),
  ('sentencia -> instruccion_break SENTENCIAFIN','sentencia',2,'p_sentencia','sintactico.py',111),
  ('declaracion -> tipo_dato IDENTIFICADOR ASIGNAR expresion','declaracion',4,'p_declaracion','sintactico.py',119),
  ('declaracion -> tipo_array IDENTIFICADOR ASIGNAR expresion_array','declaracion',4,'p_declaracion','sintactico.py',120),
  ('declaracion -> IDENTIFICADOR ASIGNAR expresion','declaracion',3,'p_declaracion','sintactico.py',121),
  ('asignacion_elemento -> IDENTIFICADOR ICORCH expresion DCORCH ASIGNAR expresion','asignacion_elemento',6,'p_asignacion_elemento','sintactico.py',160),
  ('tipo_dato -> tipo_retorno','tipo_dato',1,'p_tipo_dato','sintactico.py',196),
  ('tipo_dato -> tipo_lista','tipo_dato',1,'p_tipo_dato','sintactico.py',197),
  ('tipo_dato -> tipo_diccionario','tipo_dato',1,'p_tipo_dato','sintactico.py',198),
  ('tipo_retorno -> INT','tipo_retorno',1,'p_tipo_retorno','sintactico.py',204),
  ('tipo_retorno -> FLOAT','tipo_retorno',1,'p_tipo_retorno','sintactico.py',205),
  ('tipo_retorno -> STRING','tipo_retorno',1,'p_tipo_retorno','sintactico.py',206),
  ('tipo_retorno -> BOOL','tipo_retorno',1,'p_tipo_retorno','sintactico.py',207),
  ('tipo_retorno -> VOID','tipo_retorno',1,'p_tipo_retorno','sintactico.py',208),
  ('tipo_retorno -> CHAR','tipo_retorno',1,'p_tipo_retorno','sintactico.py',209),
  ('tipo_lista -> LISTA MENOR tipo_retorno MAYOR','tipo_lista',4,'p_tipo_lista','sintactico.py',214),
  ('tipo_diccionario -> DICTIONARY MENOR tipo_retorno COMA tipo_retorno MAYOR','tipo_diccionario',6,'p_tipo_diccionario','sintactico.py',218),
  ('tipo_array -> ARRAY_TYPE','tipo_array',1,'p_tipo_array','sintactico.py',223),
  ('expresion -> expresion_aritmetica','expresion',1,'p_expresion','sintactico.py',229),
  ('expresion -> expresion_logica','expresion',1,'p_expresion','sintactico.py',230),
  ('expresion -> valor_literal','expresion',1,'p_expresion','sintactico.py',231),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion','sintactico.py',232),
  ('expresion -> expresion_lista','expresion',1,'p_expresion','sintactico.py',233),
  ('expresion -> expresion_diccionario','expresion',1,'p_expresion','sintactico.py',234),
  ('expresion -> expresion_array','expresion',1,'p_expresion','sintactico.py',235),
  ('expresion_aritmetica -> expresion MAS expresion','expresion_aritmetica',3,'p_expresion_aritmetica','sintactico.py',241),
  ('expresion_aritmetica -> expresion MENOS expresion','expresion_aritmetica',3,'p_expresion_aritmetica','sintactico.py',242),
  ('expresion_aritmetica -> expresion POR expresion','expresion_aritmetica',3,'p_expresion_aritmetica','sintactico.py',243),
  ('expresion_aritmetica -> expresion DIVIDIR expresion','expresion_aritmetica',3,'p_expresion_aritmetica','sintactico.py',244),
  ('expresion_aritmetica -> MENOS expresion','expresion_aritmetica',2,'p_expresion_aritmetica','sintactico.py',245),
  ('expresion_logica -> expresion MAYOR expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',254),
  ('expresion_logica -> expresion MENOR expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',255),
  ('expresion_logica -> expresion MAYORIGUAL expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',256),
  ('expresion_logica -> expresion MENORIGUAL expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',257),
  ('expresion_logica -> expresion IGUAL expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',258),
  ('expresion_logica -> expresion DIFERENTE expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',259),
  ('expresion_logica -> expresion AND expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',260),
  ('expresion_logica -> expresion OR expresion','expresion_logica',3,'p_expresion_logica','sintactico.py',261),
  ('expresion_logica -> NOT expresion','expresion_logica',2,'p_expresion_logica','sintactico.py',262),
  ('expresion -> IPAREN expresion DPAREN','expresion',3,'p_expresion_agrupacion','sintactico.py',270),
  ('valor_literal -> INT_LITERAL','valor_literal',1,'p_valor_literal','sintactico.py',275),
  ('valor_literal -> FLOAT_LITERAL','valor_literal',1,'p_valor_literal','sintactico.py',276),
  ('valor_literal -> STRING_LITERAL','valor_literal',1,'p_valor_literal','sintactico.py',277),
  ('valor_literal -> CHAR_LITERAL','valor_literal',1,'p_valor_literal','sintactico.py',278),
  ('valor_literal -> TRUE','valor_literal',1,'p_valor_literal','sintactico.py',279),
  ('valor_literal -> FALSE','valor_literal',1,'p_valor_literal','sintactico.py',280),
  ('expresion_lista -> NEW tipo_lista IPAREN DPAREN','expresion_lista',4,'p_expresion_lista','sintactico.py',285),
  ('expresion_diccionario -> NEW tipo_diccionario IPAREN DPAREN','expresion_diccionario',4,'p_expresion_diccionario','sintactico.py',289),
  ('expresion_array -> ARRAY_CREATION','expresion_array',1,'p_expresion_array','sintactico.py',294),
  ('expresion_array -> ILLAVE lista_elementos_array DLLAVE','expresion_array',3,'p_expresion_array','sintactico.py',295),
  ('lista_elementos_array -> expresion COMA lista_elementos_array','lista_elementos_array',3,'p_lista_elementos_array','sintactico.py',304),
  ('lista_elementos_array -> expresion','lista_elementos_array',1,'p_lista_elementos_array','sintactico.py',305),
  ('if_statement -> IF IPAREN expresion DPAREN bloque_codigo','if_statement',5,'p_if_statement','sintactico.py',315),
  ('while_loop -> WHILE IPAREN expresion DPAREN enter_loop_scope bloque_codigo','while_loop',6,'p_while_loop','sintactico.py',319),
  ('for_loop -> FOR IPAREN declaracion SENTENCIAFIN expresion SENTENCIAFIN expresion DPAREN enter_loop_scope bloque_codigo','for_loop',10,'p_for_loop','sintactico.py',324),
  ('enter_loop_scope -> <empty>','enter_loop_scope',0,'p_enter_loop_scope','sintactico.py',329),
  ('bloque_codigo -> ILLAVE lista_sentencias DLLAVE','bloque_codigo',3,'p_bloque_codigo','sintactico.py',333),
  ('impresion -> CONSOLE PUNTO WRITELINE IPAREN expresion DPAREN','impresion',6,'p_impresion','sintactico.py',339),
  ('instruccion_return -> RETURN expresion','instruccion_return',2,'p_instruccion_return','sintactico.py',343),
  ('instruccion_break -> BREAK','instruccion_break',1,'p_instruccion_break','sintactico.py',347),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',353),
]
